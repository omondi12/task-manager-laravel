<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fixed Laravel Task Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {}
            }
        }
    </script>
</head>
<body class="bg-gray-50 dark:bg-gray-900 min-h-screen">
<div class="max-w-7xl mx-auto p-6">
    <!-- Success Message -->
    <div id="successMessage" class="mb-6 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 px-4 py-3 rounded-lg flex items-center hidden">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span id="messageText">Success message</span>
    </div>

    <!-- Header with Actions -->
    <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 space-y-4 lg:space-y-0">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                My Tasks
            </h1>
            <p class="text-gray-600 dark:text-gray-400">
                Stay organized and boost your productivity
            </p>
        </div>
        
        <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
            <button 
                onclick="toggleCategoryForm()" 
                class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg shadow-sm hover:shadow-md transform hover:scale-105 transition-all duration-200 flex items-center justify-center"
            >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                </svg>
                Add Category
            </button>
            <button 
                onclick="toggleCreateForm()" 
                class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-sm hover:shadow-md transform hover:scale-105 transition-all duration-200 flex items-center justify-center"
            >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add New Task
            </button>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mb-8">
        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
            <div class="text-center">
                <div class="text-2xl font-bold text-gray-900 dark:text-white" id="totalTasks">0</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">Total Tasks</div>
            </div>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
            <div class="text-center">
                <div class="text-2xl font-bold text-green-600 dark:text-green-400" id="completedTasks">0</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">Completed</div>
            </div>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
            <div class="text-center">
                <div class="text-2xl font-bold text-blue-600 dark:text-blue-400" id="pendingTasks">0</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">Pending</div>
            </div>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
            <div class="text-center">
                <div class="text-2xl font-bold text-yellow-600 dark:text-yellow-400" id="inProgressTasks">0</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">In Progress</div>
            </div>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
            <div class="text-center">
                <div class="text-2xl font-bold text-red-600 dark:text-red-400" id="overdueTasks">0</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">Overdue</div>
            </div>
        </div>
    </div>

    <!-- Search and Filters -->
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6">
        <div class="flex flex-col lg:flex-row space-y-4 lg:space-y-0 lg:space-x-4">
            <!-- Search -->
            <div class="flex-1">
                <input 
                    id="searchQuery"
                    type="text" 
                    placeholder="Search tasks..."
                    class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                    oninput="filterTasks()"
                >
            </div>

            <!-- Filters -->
            <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                <!-- Status Filter -->
                <select id="statusFilter" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" onchange="filterTasks()">
                    <option value="all">All Status</option>
                    <option value="pending">Pending</option>
                    <option value="in_progress">In Progress</option>
                    <option value="completed">Completed</option>
                </select>

                <!-- Priority Filter -->
                <select id="priorityFilter" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" onchange="filterTasks()">
                    <option value="all">All Priority</option>
                    <option value="low">Low</option>
                    <option value="normal">Normal</option>
                    <option value="high">High</option>
                    <option value="critical">Critical</option>
                </select>

                <!-- Category Filter -->
                <select id="categoryFilter" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" onchange="filterTasks()">
                    <option value="all">All Categories</option>
                    <option value="none">No Category</option>
                </select>

                <!-- Clear Filters -->
                <button 
                    onclick="clearFilters()"
                    class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 whitespace-nowrap"
                >
                    Clear Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Create Category Form -->
    <div id="categoryForm" class="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-6 mb-6 hidden">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Create New Category</h3>
            <button onclick="toggleCategoryForm()" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <form onsubmit="createCategory(event)" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="md:col-span-2">
                    <label for="categoryName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Category Name</label>
                    <input 
                        id="categoryName" 
                        type="text" 
                        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                        placeholder="e.g., Work, Personal, Shopping"
                        required
                    >
                </div>
                
                <div>
                    <label for="categoryColor" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Color</label>
                    <input 
                        id="categoryColor" 
                        type="color" 
                        value="#6366f1"
                        class="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 cursor-pointer"
                    >
                </div>
            </div>

            <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button type="button" onclick="toggleCategoryForm()" class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700">
                    Cancel
                </button>
                <button 
                    type="submit"
                    class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors duration-200"
                >
                    Create Category
                </button>
            </div>
        </form>
    </div>

    <!-- Create/Edit Task Form -->
    <div id="taskForm" class="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-6 mb-8 hidden">
        <div class="flex justify-between items-center mb-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white" id="formTitle">
                Create New Task
            </h3>
            <button onclick="toggleCreateForm()" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <form onsubmit="createTask(event)" class="space-y-6">
            <!-- Title -->
            <div>
                <label for="taskTitle" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Task Title</label>
                <input 
                    id="taskTitle" 
                    type="text" 
                    class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                    placeholder="What needs to be done?"
                    required
                >
            </div>

            <!-- Description -->
            <div>
                <label for="taskDescription" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description (Optional)</label>
                <textarea 
                    id="taskDescription"
                    rows="3"
                    class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                    placeholder="Add more details about this task..."
                ></textarea>
            </div>

            <!-- Priority, Due Date, and Category Row -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Priority -->
                <div>
                    <label for="taskPriority" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Priority</label>
                    <select 
                        id="taskPriority"
                        class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                    >
                        <option value="low">Low</option>
                        <option value="normal" selected>Normal</option>
                        <option value="high">High</option>
                        <option value="critical">Critical</option>
                    </select>
                </div>

                <!-- Due Date -->
                <div>
                    <label for="taskDueDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Due Date</label>
                    <input 
                        id="taskDueDate" 
                        type="datetime-local" 
                        class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                    >
                </div>

                <!-- Category -->
                <div>
                    <label for="taskCategory" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Category</label>
                    <select 
                        id="taskCategory"
                        class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors duration-200"
                    >
                        <option value="">No Category</option>
                    </select>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button 
                    type="button" 
                    onclick="toggleCreateForm()"
                    class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
                >
                    Cancel
                </button>
                <button 
                    type="submit"
                    class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
                    id="submitButton"
                >
                    Create Task
                </button>
            </div>
        </form>
    </div>

    <!-- Tasks List -->
    <div id="tasksList" class="space-y-4">
        <!-- Empty State -->
        <div id="emptyState" class="text-center py-16">
            <svg class="mx-auto h-24 w-24 text-gray-300 dark:text-gray-600 mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
            <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-2">No tasks yet</h3>
            <p class="text-gray-500 dark:text-gray-400 mb-6">
                Get started by creating your first task to stay organized and productive.
            </p>
            <button 
                onclick="toggleCreateForm()"
                class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-sm hover:shadow-md transform hover:scale-105 transition-all duration-200"
            >
                Create Your First Task
            </button>
        </div>
    </div>

    <!-- Categories Management Section -->
    <div id="categoriesSection" class="mt-12 hidden">
        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Your Categories</h3>
        <div id="categoriesList" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
        </div>
    </div>
</div>

<script>
// Sample data for demonstration
let tasks = [];
let categories = [];
let taskIdCounter = 1;
let categoryIdCounter = 1;
let editingTaskId = null;

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    updateStats();
    updateCategoryFilter();
    renderTasks();
    renderCategories();
});

// Toggle functions
function toggleCreateForm() {
    const form = document.getElementById('taskForm');
    const isHidden = form.classList.contains('hidden');
    
    if (isHidden) {
        form.classList.remove('hidden');
        clearTaskForm();
        document.getElementById('formTitle').textContent = 'Create New Task';
        document.getElementById('submitButton').textContent = 'Create Task';
        editingTaskId = null;
    } else {
        form.classList.add('hidden');
        clearTaskForm();
        editingTaskId = null;
    }
}

function toggleCategoryForm() {
    const form = document.getElementById('categoryForm');
    form.classList.toggle('hidden');
    
    if (!form.classList.contains('hidden')) {
        document.getElementById('categoryName').value = '';
        document.getElementById('categoryColor').value = '#6366f1';
    }
}

// Task management functions
function createTask(event) {
    event.preventDefault();
    
    const title = document.getElementById('taskTitle').value.trim();
    const description = document.getElementById('taskDescription').value.trim();
    const priority = document.getElementById('taskPriority').value;
    const dueDate = document.getElementById('taskDueDate').value;
    const categoryId = document.getElementById('taskCategory').value;
    
    if (!title) return;
    
    if (editingTaskId) {
        // Update existing task
        const taskIndex = tasks.findIndex(t => t.id === editingTaskId);
        if (taskIndex !== -1) {
            tasks[taskIndex] = {
                ...tasks[taskIndex],
                title,
                description,
                priority,
                dueDate: dueDate || null,
                categoryId: categoryId || null
            };
            showMessage('Task updated successfully!');
        }
        editingTaskId = null;
    } else {
        // Create new task
        const newTask = {
            id: taskIdCounter++,
            title,
            description,
            priority,
            status: 'pending',
            dueDate: dueDate || null,
            categoryId: categoryId || null,
            createdAt: new Date().toISOString()
        };
        
        tasks.push(newTask);
        showMessage('Task created successfully!');
    }
    
    toggleCreateForm();
    renderTasks();
    updateStats();
}

function deleteTask(taskId) {
    if (confirm('Are you sure you want to delete this task?')) {
        tasks = tasks.filter(task => task.id !== taskId);
        renderTasks();
        updateStats();
        showMessage('Task deleted successfully!');
    }
}

function toggleTask(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (task) {
        task.status = task.status === 'completed' ? 'pending' : 'completed';
        renderTasks();
        updateStats();
    }
}

function markInProgress(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (task) {
        task.status = 'in_progress';
        renderTasks();
        updateStats();
    }
}

function editTask(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (task) {
        editingTaskId = taskId;
        document.getElementById('taskTitle').value = task.title;
        document.getElementById('taskDescription').value = task.description || '';
        document.getElementById('taskPriority').value = task.priority;
        document.getElementById('taskDueDate').value = task.dueDate || '';
        document.getElementById('taskCategory').value = task.categoryId || '';
        
        document.getElementById('formTitle').textContent = 'Edit Task';
        document.getElementById('submitButton').textContent = 'Update Task';
        document.getElementById('taskForm').classList.remove('hidden');
    }
}

// Category management functions
function createCategory(event) {
    event.preventDefault();
    
    const name = document.getElementById('categoryName').value.trim();
    const color = document.getElementById('categoryColor').value;
    
    if (!name) return;
    
    const newCategory = {
        id: categoryIdCounter++,
        name,
        color,
        tasksCount: 0
    };
    
    categories.push(newCategory);
    toggleCategoryForm();
    updateCategoryFilter();
    renderCategories();
    showMessage('Category created successfully!');
}

// Render functions
function renderTasks() {
    const container = document.getElementById('tasksList');
    const emptyState = document.getElementById('emptyState');
    
    if (tasks.length === 0) {
        container.innerHTML = '';
        container.appendChild(emptyState);
        return;
    }
    
    let filteredTasks = filterTasksArray();
    
    if (filteredTasks.length === 0) {
        container.innerHTML = `
            <div class="text-center py-16">
                <svg class="mx-auto h-24 w-24 text-gray-300 dark:text-gray-600 mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-2">No tasks match your filters</h3>
                <p class="text-gray-500 dark:text-gray-400 mb-6">Try adjusting your search criteria or filters.</p>
                <button onclick="clearFilters()" class="px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200">
                    Clear All Filters
                </button>
            </div>
        `;
        return;
    }
    
    container.innerHTML = filteredTasks.map(task => {
        const category = categories.find(c => c.id === task.categoryId);
        const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && task.status !== 'completed';
        
        return `
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 hover:shadow-md transition-all duration-200 group">
                <div class="flex items-start justify-between">
                    <div class="flex items-start space-x-4 flex-1">
                        <button 
                            onclick="toggleTask(${task.id})"
                            class="mt-1 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all duration-200
                                ${task.status === 'completed' ? 'bg-green-500 border-green-500' : 'border-gray-300 dark:border-gray-600 hover:border-green-400'}
                                ${task.status === 'in_progress' ? 'bg-blue-500 border-blue-500' : ''}"
                        >
                            ${task.status === 'completed' ? `
                                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                                </svg>
                            ` : task.status === 'in_progress' ? `
                                <div class="w-2 h-2 bg-white rounded-full"></div>
                            ` : ''}
                        </button>

                        <div class="flex-1">
                            <div class="flex flex-wrap items-center gap-3 mb-2">
                                <h3 class="text-lg font-medium text-gray-900 dark:text-white ${task.status === 'completed' ? 'line-through text-gray-500 dark:text-gray-400' : ''}">
                                    ${task.title}
                                </h3>
                                
                                <span class="px-2 py-1 text-xs font-medium rounded-full
                                    ${task.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' : ''}
                                    ${task.status === 'in_progress' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' : ''}
                                    ${task.status === 'pending' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' : ''}
                                ">
                                    ${task.status.charAt(0).toUpperCase() + task.status.slice(1).replace('_', ' ')}
                                </span>
                                
                                <span class="px-2 py-1 text-xs font-medium rounded-full 
                                    ${task.priority === 'critical' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300' : ''}
                                    ${task.priority === 'high' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300' : ''}
                                    ${task.priority === 'normal' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' : ''}
                                    ${task.priority === 'low' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' : ''}
                                ">
                                    ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
                                </span>

                                ${category ? `
                                    <span 
                                        class="px-2 py-1 text-xs font-medium rounded-full text-white"
                                        style="background-color: ${category.color}"
                                    >
                                        ${category.name}
                                    </span>
                                ` : ''}
                            </div>

                            ${task.description ? `
                                <p class="text-gray-600 dark:text-gray-400 mb-3 ${task.status === 'completed' ? 'line-through' : ''}">
                                    ${task.description}
                                </p>
                            ` : ''}

                            ${task.dueDate ? `
                                <div class="flex items-center text-sm ${isOverdue ? 'text-red-500 dark:text-red-400' : 'text-gray-500 dark:text-gray-400'}">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    Due: ${new Date(task.dueDate).toLocaleDateString('en-US', {
                                        month: 'short',
                                        day: 'numeric',
                                        year: 'numeric',
                                        hour: 'numeric',
                                        minute: '2-digit'
                                    })}
                                    ${isOverdue ? `
                                        <span class="ml-2 px-2 py-1 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300 text-xs rounded-full">
                                            Overdue
                                        </span>
                                    ` : ''}
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    <div class="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                        ${task.status === 'pending' ? `
                            <button 
                                onclick="markInProgress(${task.id})"
                                class="p-2 text-blue-500 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200"
                                title="Mark as In Progress"
                            >
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.5a1.5 1.5 0 001.5-1.5V9a6 6 0 016 6v.5a1.5 1.5 0 01-1.5 1.5H14m-7-6V9a6 6 0 016-6v.5a1.5 1.5 0 011.5 1.5V10H14"></path>
                                </svg>
                            </button>
                        ` : ''}
                        
                        <button 
                            onclick="editTask(${task.id})"
                            class="p-2 text-gray-400 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200"
                            title="Edit Task"
                        >
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                        </button>
                        
                        <button 
                            onclick="deleteTask(${task.id})"
                            class="p-2 text-gray-400 hover:text-red-500 dark:hover:text-red-400 transition-colors duration-200"
                            title="Delete Task"
                        >
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

function renderCategories() {
    const section = document.getElementById('categoriesSection');
    const container = document.getElementById('categoriesList');
    
    if (categories.length === 0) {
        section.classList.add('hidden');
        return;
    }
    
    section.classList.remove('hidden');
    
    container.innerHTML = categories.map(category => {
        const taskCount = tasks.filter(task => task.categoryId === category.id).length;
        
        return `
            <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
                <div class="flex items-center space-x-3">
                    <div 
                        class="w-4 h-4 rounded-full flex-shrink-0"
                        style="background-color: ${category.color}"
                    ></div>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-900 dark:text-white truncate">
                            ${category.name}
                        </p>
                        <p class="text-xs text-gray-500 dark:text-gray-400">
                            ${taskCount} task${taskCount !== 1 ? 's' : ''}
                        </p>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// Filter functions
function filterTasks() {
    renderTasks();
    updateStats();
}

function filterTasksArray() {
    const searchQuery = document.getElementById('searchQuery').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const categoryFilter = document.getElementById('categoryFilter').value;
    
    return tasks.filter(task => {
        const matchesSearch = !searchQuery || 
            task.title.toLowerCase().includes(searchQuery) ||
            (task.description && task.description.toLowerCase().includes(searchQuery));
            
        const matchesStatus = statusFilter === 'all' || task.status === statusFilter;
        const matchesPriority = priorityFilter === 'all' || task.priority === priorityFilter;
        
        let matchesCategory = true;
        if (categoryFilter !== 'all') {
            if (categoryFilter === 'none') {
                matchesCategory = !task.categoryId;
            } else {
                matchesCategory = task.categoryId === parseInt(categoryFilter);
            }
        }
        
        return matchesSearch && matchesStatus && matchesPriority && matchesCategory;
    });
}

function clearFilters() {
    document.getElementById('searchQuery').value = '';
    document.getElementById('statusFilter').value = 'all';
    document.getElementById('priorityFilter').value = 'all';
    document.getElementById('categoryFilter').value = 'all';
    filterTasks();
}

// Utility functions
function updateStats() {
    const totalTasks = tasks.length;
    const completedTasks = tasks.filter(t => t.status === 'completed').length;
    const pendingTasks = tasks.filter(t => t.status === 'pending').length;
    const inProgressTasks = tasks.filter(t => t.status === 'in_progress').length;
    const overdueTasks = tasks.filter(t => 
        t.dueDate && new Date(t.dueDate) < new Date() && t.status !== 'completed'
    ).length;
    
    document.getElementById('totalTasks').textContent = totalTasks;
    document.getElementById('completedTasks').textContent = completedTasks;
    document.getElementById('pendingTasks').textContent = pendingTasks;
    document.getElementById('inProgressTasks').textContent = inProgressTasks;
    document.getElementById('overdueTasks').textContent = overdueTasks;
}

function updateCategoryFilter() {
    const select = document.getElementById('taskCategory');
    const filter = document.getElementById('categoryFilter');
    
    // Update task form category dropdown
    const taskOptions = categories.map(category => 
        `<option value="${category.id}">${category.name}</option>`
    ).join('');
    select.innerHTML = `<option value="">No Category</option>${taskOptions}`;
    
    // Update filter dropdown
    const filterOptions = categories.map(category => 
        `<option value="${category.id}">${category.name} (${tasks.filter(t => t.categoryId === category.id).length})</option>`
    ).join('');
    
    const currentFilterOptions = filter.innerHTML.split('</option>').slice(0, 2).join('</option>') + '</option>';
    filter.innerHTML = currentFilterOptions + filterOptions;
}

function clearTaskForm() {
    document.getElementById('taskTitle').value = '';
    document.getElementById('taskDescription').value = '';
    document.getElementById('taskPriority').value = 'normal';
    document.getElementById('taskDueDate').value = '';
    document.getElementById('taskCategory').value = '';
}

function showMessage(message) {
    const messageDiv = document.getElementById('successMessage');
    const messageText = document.getElementById('messageText');
    
    messageText.textContent = message;
    messageDiv.classList.remove('hidden');
    
    setTimeout(() => {
        messageDiv.classList.add('hidden');
    }, 3000);
}

// Add some sample data for demonstration
function addSampleData() {
    // Add sample categories
    categories.push(
        { id: categoryIdCounter++, name: 'Work', color: '#3b82f6', tasksCount: 0 },
        { id: categoryIdCounter++, name: 'Personal', color: '#10b981', tasksCount: 0 },
        { id: categoryIdCounter++, name: 'Shopping', color: '#f59e0b', tasksCount: 0 }
    );
    
    // Add sample tasks
    tasks.push(
        {
            id: taskIdCounter++,
            title: 'Complete project proposal',
            description: 'Finish the Q4 project proposal and send it to the team for review',
            priority: 'high',
            status: 'in_progress',
            dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString().slice(0, 16),
            categoryId: 1,
            createdAt: new Date().toISOString()
        },
        {
            id: taskIdCounter++,
            title: 'Buy groceries',
            description: 'Milk, eggs, bread, and vegetables',
            priority: 'normal',
            status: 'pending',
            dueDate: null,
            categoryId: 3,
            createdAt: new Date().toISOString()
        },
        {
            id: taskIdCounter++,
            title: 'Exercise routine',
            description: '30 minutes cardio and strength training',
            priority: 'low',
            status: 'completed',
            dueDate: null,
            categoryId: 2,
            createdAt: new Date().toISOString()
        }
    );
    
    updateStats();
    updateCategoryFilter();
    renderTasks();
    renderCategories();
}

// Load sample data on page load for demonstration
setTimeout(addSampleData, 500);
</script>
</body>
</html>